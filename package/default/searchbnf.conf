# searchbnf.conf

[trackme-command]
syntax = | trackme url=<API endpoint> mode=<HTTP method: get/post/delete> body=<Optional: provides the HTTP body in a json format>
description = \
    This command is a REST API wrapper for TrackMe API endpoints, it allows performing \
    get / post / delete HTTP calls against an endpoint and returns a JSON format answer. \
    Syntax: \
    | trackme url=<API endpoint> mode=<HTTP method: get/post/delete> body=<Optional: provides the HTTP body in a json format>
comment1 = \
    This example calls the smart_status endpoint to provide an advanced status with automated \
    correlations and investigations.
example1 = \
    | trackme url=/services/trackme/v1/smart_status/ds_smart_status mode=get body="{'data_name': 'firewall:pan:traffic'}"
shortdesc = REST API wrapper for TrackMe, allows performing \
    get / post / delete HTTP calls against an endpoint.
usage = public
tags = trackme

# for audit purge records
[trackmepurgeaudit-command]
syntax = | trackmepurgeaudit
description = \
    This command is a generating command used to retrieve and purge old audit records according to the retention defined \
    in the macro trackme_audit_changes_retention_days, expressed in days. \
    Syntax: \
    | trackmepurgeaudit
comment1 = \
    This command does not require any arguments.
example1 = \
    | trackmepurgeaudit
shortdesc = REST API wrapper for TrackMe, allows performing \
    TrackMe old audit changes records purge according to the retention defined in the macro trackme_audit_changes_retention_days.
usage = public
tags = trackme

# Performs remote search to any Splunk instance over REST, using a bearer token and an account configured
[splunkremotesearch-command]
syntax = | splunkremotesearch account=<API endpoint> search=<Splunk SPL search> earliest=<earliest quantifier> latest=<latest quantifier>
description = \
    This command is a REST remote search for Splunk, it allows performing \
    any search to a remote Splunk deployment and returns a JSON format answer. \
    Syntax: \
    | splunkremotesearch account=<API endpoint> search=<Splunk SPL search> earliest=<earliest quantifier> latest=<latest quantifier>
comment1 = \
    This example performs a simple magic search to a remote Splunk deployment
example1 = \
    | splunkremotesearch account=acme_splunk search="| tstats max(_indextime) as data_last_ingest, min(_time) as data_first_time_seen, max(_time) as data_last_time_seen, count as data_eventcount, dc(host) as dcount_host where index=\"firewall\" | eval data_name=\"test\", data_index=\"test\", data_sourcetype=\"pan:traffic\", data_last_ingestion_lag_seen=data_last_ingest-data_last_time_seen" earliest="-4h" latest="+4h"
shortdesc = REST remote search for Splunk, it allows performing \
    any search to a remote Splunk deployment and returns a JSON format answer.
usage = public
tags = trackme

# The Data Sampling mass executor
[trackmesamplingexecutor-command]
syntax = | trackmesamplingexecutor search=<data sampling main job>
description = \
    This command is the TrackMe data sampling mass job executor
    Syntax: \
    | trackmesamplingexecutor search=<data sampling main job>
comment1 = \
    This example performs the mass data sampling main job
example1 = \
    | trackmesamplingexecutor search="| `trackme_data_sampling_mainjob(*)`"
shortdesc = TrackMe Data Sampling mass executor job
usage = public
tags = trackme

# The Elastic Sources shared mass executor
[trackmeelasticexecutor-command]
syntax = | trackmeelasticexecutor search=<elastic sources shared main job>
description = \
    This command is the TrackMe Elastic Sources shared mass job executor
    Syntax: \
    | trackmesamplingexecutor search=<elastic sources shared main job>
comment1 = \
    This example performs the Elastic Sources shared mass main job
example1 = \
    | trackmeelasticexecutor search="| `trackme_elastic_sources_shared_mainjob`"
shortdesc = TrackMe Elastic Sources shared mass executor job
usage = public
tags = trackme
