# macros.conf

# comment
[comment(1)]
args = text
definition = ""
iseval = 1

# For Splunk 7.3.x and later, you might want to include include_reduced_buckets=t
[tstats]
definition = tstats
iseval = 0

# Data source availability default monitored state
# customize this macro to change the way the monitored state is defined by default, such as conditional operations
# using the index or sourcetype naming convention

# used as the top of the populating searches
[trackme_tstats_main_filter]
definition = sourcetype!="stash" sourcetype!="*too_small"
iseval = 0

# used as the top of the populating searches for metric indexes
[trackme_mstats_main_filter]
definition = metric_name="*"
iseval = 0

[trackme_default_monitored_state]
definition = eval data_monitored_state=if(isnull(data_monitored_state), "enabled", data_monitored_state)
iseval = 0

[trackme_default_host_monitored_state]
definition = eval data_monitored_state=if(isnull(data_monitored_state), "enabled", data_monitored_state)
iseval = 0

[trackme_default_metric_host_monitored_state]
definition = eval metric_monitored_state=if(isnull(metric_monitored_state), "enabled", metric_monitored_state)
iseval = 0

[trackme_default_lag]
definition = eval data_max_lag_allowed=if(isnull(data_max_lag_allowed), "3600", data_max_lag_allowed)
iseval = 0

[trackme_default_host_lag]
definition = eval data_max_lag_allowed=if(isnull(data_max_lag_allowed), "86400", data_max_lag_allowed)
iseval = 0

[trackme_default_metric_host_lag]
definition = eval metric_max_lag_allowed=if(isnull(metric_max_lag_allowed), "300", metric_max_lag_allowed)
iseval = 0

[trackme_default_monitored_wdays]
definition = eval data_monitoring_wdays=if(isnull(data_monitoring_wdays), "auto:all_days", data_monitoring_wdays)
iseval = 0

[trackme_default_host_monitored_wdays]
definition = eval data_monitoring_wdays=if(isnull(data_monitoring_wdays), "auto:all_days", data_monitoring_wdays)
iseval = 0

[trackme_default_priority]
definition = eval priority=if(isnull(priority), "medium", priority)

# can be customized for filtering
[trackme_data_sources_filtering]
definition = search data_name=*
iseval = 0

# can be customized for date format
[trackme_date_format(1)]
args = input_field
definition = eval "$input_field$ (translated)"=strftime($input_field$, "%d/%m/%Y %H:%M")
iseval = 0

# defined pattern filter for indexers
[trackme_idx_filter]
definition = host=idx*
iseval = 0

# define the tolerance in negative seconds regarding the detection of data indexed in the future (default 30 seconds)
[trackme_future_indexing_tolerance]
definition = -600
iseval = 0

# define a filtering rule for host names, sometimes complex ingestion method that requires host Meta overwrite can fail which results in pollution of wrong hosts
# A host should match a traditional naming convention
# By default: alphanumeric chars, literal dots and hyphens, less than 100 chars
[trackme_data_host_rule_filter(1)]
args = key
definition = where match($key$, "[\w|\-|\.]") AND len($key$)<100
iseval = 0

# Evaluate the icon fields rendering
[trackme_eval_icons]
definition = fillnull value="NA" "data_last_time_seen (translated)", data_last_lag_seen, data_max_lag_allowed, data_last_ingestion_lag_seen\
| eval state = "icon|" + case(\
data_source_state=="green" AND data_monitoring_level="sourcetype", "ico_good ico_small|icon-check|Up: data source status is green, latest data available is " . 'data_last_time_seen (translated)' . " (" . data_last_lag_seen . " seconds from now), which complies with a max lag in seconds of " . data_max_lag_allowed . ".",\
data_source_state=="green" AND data_monitoring_level="index", "ico_good ico_small|icon-check|Up: data source status is green, latest data available is " . 'data_last_time_seen (translated)' . " (" . data_last_lag_seen . " seconds from now), therefore data monitoring level is set at index level, which complies with a max lag in seconds of " . data_max_lag_allowed . " for that index.",\
data_source_state=="red", "ico_error ico_small|icon-close|Down: data source status is red, lagging monitoring conditions are not met, latest data available is " . 'data_last_time_seen (translated)' . " (" . data_last_lag_seen . " seconds from now) and ingestion latency is approximately " . data_last_ingestion_lag_seen . " seconds, max lag configured in seconds is " . data_max_lag_allowed . ".",\
data_source_state=="orange" AND isnull(object_group_name) AND data_last_lag_seen>=`trackme_future_indexing_tolerance`, "ico_warn ico_small|icon-close|Warn: data source status is orange, lagging conditions are met, latest data available is " . '	data_last_time_seen (translated)' . " (" . data_last_lag_seen . " seconds from now), max lag configured in seconds is " . data_max_lag_allowed . " therefore week days rules conditions are not met.",\
data_source_state=="blue" AND isnotnull(object_group_name) AND data_last_lag_seen>=`trackme_future_indexing_tolerance`, "ico_unknown ico_small|icon-close|Info: data source does not honour lagging or week days monitoring conditions therefore it is a member of a logical group named: " . object_group_name . " which is honouring monitoring rules , the group green status percentage is " . object_group_green_percent . " % which complies with a minimal " . object_group_min_green_percent . " % green members configured for that group." . "(members: " . 	object_group_members_count . "/ red status members count: " . 	object_group_members_red . ", latest data available for the group: " . object_group_last_lag_seen . " seconds from now)",\
data_source_state=="orange" AND data_last_lag_seen<`trackme_future_indexing_tolerance`, "ico_warn ico_small|icon-close|Warn: data source status is orange, detected data indexed in the future which is most likely due to timestamping misconfiguration, timezone or time synchronization issue, latest data available is " . '	data_last_time_seen (translated)' . " (" . data_last_lag_seen . " seconds from now), max lag configured in seconds is " . data_max_lag_allowed . "."),\
monitoring = "icon|" + if(data_monitored_state=="enabled", "ico_good ico_small|icon-check|Enabled: data source is being actively monitored", "ico_error ico_small|icon-close|Disabled: data source monitoring is disabled")
iseval = 0

[trackme_eval_icons_host]
definition = fillnull value="NA" "data_last_time_seen (translated)", data_last_lag_seen, data_max_lag_allowed, data_last_ingestion_lag_seen\
| eval state = "icon|" + case(\
data_host_state=="green", "ico_good ico_small|icon-check|Up: data host status is green, latest data available is " . 'data_last_time_seen (translated)' . " (" . data_last_lag_seen . " seconds from now), which complies with a max lag in seconds of " . data_max_lag_allowed . ".",\
data_host_state=="red" AND isnull(object_group_name), "ico_error ico_small|icon-close|Down: data host status is red, lagging monitoring conditions are not met, latest data available is " . 'data_last_time_seen (translated)' . " (" . data_last_lag_seen . " seconds from now) and ingestion latency is approximately " . data_last_ingestion_lag_seen . " seconds, max lag configured in seconds is " . data_max_lag_allowed . ".",\
data_host_state=="red" AND isnotnull(object_group_name), "ico_error ico_small|icon-close|Down: data host does not honour lagging or week days monitoring conditions, in addition it is a member of a logical group named: " . object_group_name . " which is not honouring monitoring rules , the group green status percentage is " . object_group_green_percent . " % which does not comply with a minimal " . object_group_min_green_percent . " % green members configured for that group." . "(members: " . 	object_group_members_count . "/ red status members count: " . 	object_group_members_red . ", latest data available for the group: " . object_group_last_lag_seen . " seconds from now)",\
data_host_state=="orange" AND isnull(object_group_name) AND data_last_lag_seen>=`trackme_future_indexing_tolerance`, "ico_warn ico_small|icon-close|Warn: data host status is orange, lagging conditions are met, latest data available is " . '	data_last_time_seen (translated)' . " (" . data_last_lag_seen . " seconds from now), max lag configured in seconds is " . data_max_lag_allowed . " therefore week days rules conditions are not met.",\
data_host_state=="blue" AND isnotnull(object_group_name) AND data_last_lag_seen>=`trackme_future_indexing_tolerance`, "ico_unknown ico_small|icon-close|Info: data host does not honour lagging or week days monitoring conditions therefore it is a member of a logical group named: " . object_group_name . " which is honouring monitoring rules , the group green status percentage is " . object_group_green_percent . " % which complies with a minimal " . object_group_min_green_percent . " % green members configured for that group." . "(members: " . 	object_group_members_count . "/ red status members count: " . 	object_group_members_red . ", latest data available for the group: " . object_group_last_lag_seen . " seconds from now)",\
data_host_state=="orange" AND data_last_lag_seen<`trackme_future_indexing_tolerance`, "ico_warn ico_small|icon-close|Warn: data source status is orange, detected data indexed in the future which is most likely due to timestamping misconfiguration, timezone or time synchronization issue, latest data available is " . '	data_last_time_seen (translated)' . " (" . data_last_lag_seen . " seconds from now), max lag configured in seconds is " . data_max_lag_allowed . "."),\
monitoring = "icon|" + if(data_monitored_state=="enabled", "ico_good ico_small|icon-check|Enabled: data host is being actively monitored", "ico_error ico_small|icon-close|Disabled: data host monitoring is disabled")
iseval = 0

[trackme_eval_icons_metric_host]
definition = eval state = "icon|" + case(\
metric_host_state=="green", "ico_good ico_small|icon-check|Up: metric host status is green, latest data available is " . 'last time' . " (" . metric_last_lag_seen . " seconds from now)",\
metric_host_state=="red" AND isnull(object_group_name), "ico_error ico_small|icon-close|Down: metric host status is red, lagging monitoring conditions are not met, latest data available is " . 'last time' . " (" . metric_last_lag_seen . " seconds from now)",\
metric_host_state=="red" AND isnotnull(object_group_name), "ico_error ico_small|icon-close|Down: metric host does not honour lagging conditions, in addition it is a member of a logical group named: " . object_group_name . " which is not honouring monitoring rules , the group green status percentage is " . object_group_green_percent . " % which does not comply with a minimal " . object_group_min_green_percent . " % green members configured for that group." . "(members: " . 	object_group_members_count . "/ red status members count: " . 	object_group_members_red . ", latest data available for the group: " . object_group_last_lag_seen . " seconds from now)",\
metric_host_state=="blue" AND isnotnull(object_group_name), "ico_unknown ico_small|icon-close|Info: metric host does not honour lagging conditions therefore it is a member of a logical group named: " . object_group_name . " which is honouring monitoring rules , the group green status percentage is " . object_group_green_percent . " % which complies with a minimal " . object_group_min_green_percent . " % green members configured for that group." . "(members: " . 	object_group_members_count . "/ red status members count: " . 	object_group_members_red . ", latest data available for the group: " . object_group_last_lag_seen . " seconds from now)"),\
monitoring = "icon|" + if(metric_monitored_state=="enabled", "ico_good ico_small|icon-check|Enabled: metric host is being actively monitored", "ico_error ico_small|icon-close|Disabled: metric host monitoring is disabled")
iseval = 0

[trackme_eval_icons_metric_host_state_only]
definition = eval state = "icon|" + case(metric_host_state=="green", "ico_good ico_small|icon-check|Up: metric category is available and marked as green due to monitoring rules being met (metric last time seen: " . 	metric_last_time . ", " . metric_current_lag_sec . " seconds from now, which complies with a lagging configured of " . metric_max_lag_allowed . "seconds.)",\
metric_host_state=="red", "ico_error ico_small|icon-close|Down: metric category is not available and therefore marked as down due to rules monitoring (metric last time seen: " . 	metric_last_time . ", " . metric_current_lag_sec . " seconds from now, which does not comply with a lagging configured of " . metric_max_lag_allowed . " seconds.)")
iseval = 0

[trackme_eval_icons_flip]
definition = eval object_previous_state = "icon|" + case(\
object_previous_state=="green", "ico_good ico_small|icon-check|Up: object is available and marked as green due to monitoring rules being met",\
object_previous_state=="red", "ico_error ico_small|icon-close|Down: object is not available or marked as down due to rules monitoring",\
object_previous_state=="orange", "ico_warn ico_small|icon-close|Warn: object is not available but marked as warn due to monitoring rules",\
object_previous_state=="blue", "ico_unknown ico_small|icon-close|Info: object is not available therefore it is member of a logical group which monitoring rules are met",\
object_previous_state=="discovered", "ico_unknown ico_small|icon-close|Info: object was discovered and added to the collections"),\
object_state = "icon|" + case(object_state=="green", "ico_good ico_small|icon-check|Up: object is available and marked as green due to monitoring rules being met",\
object_state=="red", "ico_error ico_small|icon-close|Down: object is not available or marked as down due to rules monitoring",\
object_state=="orange", "ico_warn ico_small|icon-close|Warn: object is not available but marked as warn due to monitoring rules",\
object_state=="blue", "ico_unknown ico_small|icon-close|Info: object is not available therefore it is member of a logical group which monitoring rules are met")
iseval = 0

# Evaluate the data source status
[trackme_eval_data_source_state]
definition = eval data_source_state=case(data_monitoring_level="index", if(data_last_lag_seen_idx>data_max_lag_allowed, "red", "green"),\
data_monitoring_level="sourcetype", if(data_last_lag_seen>data_max_lag_allowed OR data_last_ingestion_lag_seen>data_max_lag_allowed, "red", "green"))\
| eval current_wday=strftime(now(), "%a")\
| eval current_wday_no=strftime(now(), "%w")\
| eval data_source_state=if(match(data_monitoring_wdays, "^(auto|manual):all_days") AND match(current_wday, ".*") AND data_source_state="red", "red", data_source_state)\
| eval data_source_state=if(match(data_monitoring_wdays, "^(auto|manual):monday-to-friday") AND match(current_wday, "Sat|Sun") AND data_source_state="red", "orange", data_source_state)\
| eval data_source_state=if(match(data_monitoring_wdays, "^(auto|manual):monday-to-saturday") AND match(current_wday, "Sun") AND data_source_state="red", "orange", data_source_state)\
| rex field=data_monitoring_wdays "^(manual|auto)\:(?<data_monitoring_wdays_no>\d.*)"\
| makemv delim="," data_monitoring_wdays_no\
| eval data_source_state=if(isnotnull(data_monitoring_wdays_no) AND current_wday_no!=data_monitoring_wdays_no AND data_source_state="red", "orange", data_source_state)\
| eval data_source_state=if(isnull(data_last_time_seen), "red", data_source_state)\
| eval data_source_state=if(data_last_lag_seen<`trackme_future_indexing_tolerance`, "orange", data_source_state)\
| fields - current_*, data_monitoring_wdays_no

# Evaluate the host status
[trackme_eval_data_host_state]
definition = eval data_host_state=if(data_last_lag_seen>data_max_lag_allowed, "red", "green")\
| eval current_wday=strftime(now(), "%a")\
| eval current_wday_no=strftime(now(), "%w")\
| eval data_host_state=if(match(data_monitoring_wdays, "^(auto|manual):all_days") AND match(current_wday, ".*") AND data_host_state="red", "red", data_host_state)\
| eval data_host_state=if(match(data_monitoring_wdays, "^(auto|manual):monday-to-friday") AND match(current_wday, "Sat|Sun") AND data_host_state="red", "orange", data_host_state)\
| eval data_host_state=if(match(data_monitoring_wdays, "^(auto|manual):monday-to-saturday") AND match(current_wday, "Sun") AND data_host_state="red", "orange", data_host_state)\
| rex field=data_monitoring_wdays "^(manual|auto)\:(?<data_monitoring_wdays_no>\d.*)"\
| makemv delim="," data_monitoring_wdays_no\
| eval data_host_state=if(isnotnull(data_monitoring_wdays_no) AND current_wday_no!=data_monitoring_wdays_no AND data_host_state="red", "orange", data_host_state)\
| eval data_host_state=if(isnull(data_last_time_seen), "red", data_host_state)\
| eval data_host_state=if(data_last_lag_seen<`trackme_future_indexing_tolerance`, "orange", data_host_state)\
| fields - current_*, data_monitoring_wdays_no

# Automatic monitored_state disablement based on latest event received
[trackme_auto_disablement_period]
definition = relative_time(now(), "-45d")
iseval = 0

# Evaluate the per metric entity status (metric_category)
[trackme_eval_metric_category_state]
definition = eval detail_metric_host_state=if(detail_metric_current_lag_sec>detail_metric_max_lag_allowed, "red", "green")

# Evaluate the metric host status
[trackme_eval_metric_host_state]
definition = eval metric_host_state=if(match(metric_details, "metric_host_state=red"), "red", "green")

# For blacklists, detect if blacklist entry is a regular expression
[detect_rex(1)]
definition = eval is_rex=if(match($key$, "[\\\|\?|\$|\^|\[|\]|\{|\}|\+]"), "true", "false")\
| eval is_rex=if(match($key$, "\.\*"), "true", is_rex)
args = key
iseval = 0

# Blacklist exclusion for regular expression support
[apply_blacklist_rex(2)]
definition = | inputlookup $collection$ | `detect_rex($key$)` | where is_rex="true" | table $key$ | format\
| fields search\
| rex field=search mode=sed "s/$key$=/match($key$, /g"\
| rex field=search mode=sed "s/\( match/match/g"\
| rex field=search mode=sed "s/NOT \(\)/match($key$, \"null\")/g" | return $search
args = collection, key
iseval = 0

[apply_blacklist_rex(3)]
definition = | inputlookup $collection$ | `detect_rex($key$)` | where is_rex="true" | table $key$ | rename $key$ as $newkey$ | format\
| fields search\
| rex field=search mode=sed "s/$newkey$=/match($newkey$, /g"\
| rex field=search mode=sed "s/\( match/match/g"\
| rex field=search mode=sed "s/NOT \(\)/match($newkey$, \"null\")/g" | return $search
args = collection, key, newkey
iseval = 0

# Blacklist exclusions
[apply_data_source_blacklists_data_retrieve]
definition = NOT [ | inputlookup trackme_data_source_monitoring_blacklist_host | `detect_rex(data_host)` | where is_rex="false" | rename data_host as host | table host ] NOT [ | inputlookup trackme_data_source_monitoring_blacklist_index | `detect_rex(data_index)` | where is_rex="false" | rename data_index as index | table index ] NOT [ | inputlookup trackme_data_source_monitoring_blacklist_sourcetype | `detect_rex(data_sourcetype)` | where is_rex="false" | rename data_sourcetype as sourcetype | table sourcetype ]
iseval = 0

[apply_data_host_blacklists_data_retrieve]
definition = NOT [ | inputlookup trackme_data_host_monitoring_blacklist_host | `detect_rex(data_host)` | where is_rex="false" | rename data_host as host | table host ] NOT [ | inputlookup trackme_data_host_monitoring_blacklist_index | `detect_rex(data_index)` | where is_rex="false" | rename data_index as index | table index ] NOT [ | inputlookup trackme_data_host_monitoring_blacklist_sourcetype | `detect_rex(data_sourcetype)` | where is_rex="false" | rename data_sourcetype as sourcetype | table sourcetype ]
iseval = 0

[apply_metric_host_blacklists_data_retrieve]
definition = NOT [ | inputlookup trackme_metric_host_monitoring_blacklist_host | `detect_rex(metric_host)` | where is_rex="false" | rename metric_host as host | table host ] NOT [ | inputlookup trackme_metric_host_monitoring_blacklist_index | `detect_rex(metric_index)` | where is_rex="false" | rename metric_index as index | table index ]
iseval = 0

[apply_data_source_blacklists]
definition = search NOT [ | inputlookup trackme_data_source_monitoring_blacklist_index | `detect_rex(data_index)` | where is_rex="false" | table data_index ] NOT [ | inputlookup trackme_data_source_monitoring_blacklist_sourcetype | `detect_rex(data_sourcetype)` | where is_rex="false" | table data_sourcetype ]\
| where NOT [ `apply_blacklist_rex(trackme_data_source_monitoring_blacklist_index, data_index)` ]\
| where NOT [ `apply_blacklist_rex(trackme_data_source_monitoring_blacklist_sourcetype, data_sourcetype)` ]\
| where NOT [ `apply_blacklist_rex(trackme_data_source_monitoring_blacklist_host, data_host)` ]
iseval = 0

[apply_data_host_blacklists]
definition = search NOT [ | inputlookup trackme_data_host_monitoring_blacklist_host | `detect_rex(data_host)` | where is_rex="false" | table data_host ] NOT [ | inputlookup trackme_data_host_monitoring_blacklist_index | `detect_rex(data_index)` | where is_rex="false" | table data_index ] NOT [ | inputlookup trackme_data_host_monitoring_blacklist_sourcetype | `detect_rex(data_sourcetype)` | where is_rex="false" | table data_sourcetype ]\
| where NOT [ `apply_blacklist_rex(trackme_data_host_monitoring_blacklist_index, data_index)` ]\
| where NOT [ `apply_blacklist_rex(trackme_data_host_monitoring_blacklist_sourcetype, data_sourcetype)` ]\
| where NOT [ `apply_blacklist_rex(trackme_data_host_monitoring_blacklist_host, data_host)` ]
iseval = 0

[apply_metric_host_blacklists]
definition = search NOT [ | inputlookup trackme_metric_host_monitoring_blacklist_host | `detect_rex(metric_host)` | where is_rex="false" | table metric_host ] NOT [ | inputlookup trackme_metric_host_monitoring_blacklist_index | `detect_rex(metric_index)` | where is_rex="false" | table metric_index ]\
| where NOT [ `apply_blacklist_rex(trackme_metric_host_monitoring_blacklist_host, metric_host)` ]\
| where NOT [ `apply_blacklist_rex(trackme_metric_host_monitoring_blacklist_index, metric_index)` ]
iseval = 0

[apply_metric_host_blacklists_metric_category]
definition = search NOT [ | inputlookup trackme_metric_host_monitoring_blacklist_metric_category | table metric_category ]
iseval = 0

[apply_metric_host_blacklists_detail_metric_category]
definition = search NOT [ | inputlookup trackme_metric_host_monitoring_blacklist_metric_category | table metric_category ] NOT [ | inputlookup trackme_metric_host_monitoring_blacklist_metric_category | table metric_category | rename metric_category as detail_metric_category ]
iseval = 0

# Default retention for audit changes, in relative time format.
# Default is 90d
[trackme_audit_changes_retention]
definition =  where _time>relative_time(now(), "-90d")
iseval = 0

# Default retention for flip states, in relative time format.
# Default is 90d
[trackme_flip_state_retention]
definition =  where _time>relative_time(now(), "-90d")
iseval = 0

# Default priority levels for OOTB alerts
[trackme_alerts_priority]
definition = priority="medium" OR priority="high"
iseval = 0

# whitelist indexes
[trackme_get_idx_whitelist(2)]
args = lookup, outname
definition = [ | inputlookup $lookup$\
| getidxwhitelist fieldname=word_count pattern="\\w+" outname=$outname$ $outname$\
| rex max_match=0 "\(\'$outname$\'\, \'(?<index>[^\']*)\'\)" | fields - _raw | mvexpand index ]
iseval = 0

[trackme_get_idx_whitelist_searchtime(2)]
args = lookup, outname
definition = [ | inputlookup $lookup$\
| getidxwhitelist fieldname=word_count pattern="\\w+" outname=$outname$ $outname$\
| rex max_match=0 "\(\'$outname$\'\, \'(?<index>[^\']*)\'\)" | fields - _raw | mvexpand index | rename index as $outname$ ]
iseval = 0

# TrackMe data source identity card
[trackme_get_identity_card(1)]
args = key
definition = lookup trackme_sources_knowledge object as $key$\
| eval doc_link=if(isnull(doc_link), "null", doc_link), doc_note=if(isnull(doc_note), "null", doc_note)
iseval = 0

# Ack default duration in seconds
[trackme_ack_default_duration]
definition = 86400
iseval = 0

# Ack add
[trackme_ack_add(3)]
definition = makeresults\
| eval object="$object$", object_category="$object_category$"\
| rename _time as ack_mtime\
| eval ack_expiration=now()+($ack_duration$), ack_state="active"\
| fields object, object_category, ack_mtime, ack_expiration, ack_state\
| append [ | inputlookup trackme_alerts_ack | where NOT (object="$object$" AND object_category="$object_category$") ]\
| outputlookup trackme_alerts_ack
args = object, object_category, ack_duration
iseval = 0

# Ack get
[trackme_ack_get(2)]
definition = makeresults\
| eval object="$object$", object_category="$object_category$"\
| lookup trackme_alerts_ack object object_category OUTPUT | rename _key as keyid\
| table keyid, object, object_category, ack_mtime, ack_expiration, ack_state | fields - _time\
| eval ack_state=if(isnull(ack_state), "inactive", ack_state)\
| eval ack_mtime=if(ack_state="active", strftime(ack_mtime, "%c"), "N/A"), ack_expiration=if(ack_state="active", strftime(ack_expiration, "%c"), "N/A")
args = object, object_category
iseval = 0

# Ack lookup
[trackme_ack_lookup(2)]
definition = eval object_category="$object_category$" | lookup trackme_alerts_ack object as $object$ object_category | eval ack_state=if(isnull(ack_state), "inactive", ack_state) | where ack_state!="active" | fields - ack_*
args = object, object_category
iseval = 0

# Ack disable
[trackme_ack_disable(1)]
definition = inputlookup trackme_alerts_ack | eval keyid=_key\
| eval ack_state=if(keyid="$keyid$", "inactive", ack_state)\
| eval ack_expiration=if(ack_state="inactive", "N/A", ack_expiration), ack_mtime=if(ack_state="inactive", "N/A", ack_mtime) | fields keyid, *\
| outputlookup append=t trackme_alerts_ack key_field=keyid
args = keyid
iseval = 0

# Logical group for data host monitoring
[trackme_data_host_group_lookup]
definition = eval object_category="data_host" | lookup trackme_logical_group object_group_members as data_host OUTPUTNEW _key as object_group_key, object_group_name, object_group_min_green_percent\
| eventstats count as object_group_members_count, min(data_last_lag_seen) as object_group_last_lag_seen, count(eval(data_host_state="red")) as object_group_members_red by object_group_key, object_group_name\
| eval object_group_green_percent=100-(object_group_members_red/object_group_members_count*100)\
| eval data_host_state=if(isnotnull(object_group_key) AND isnotnull(object_group_name) AND data_host_state!="green" AND object_group_green_percent>=object_group_min_green_percent, "blue", data_host_state)\
| eval object_group_state=if(isnotnull(object_group_key) AND isnotnull(object_group_name) AND object_group_green_percent>=object_group_min_green_percent, "green", "red")
iseval = 0

# Logical group for metric host monitoring
[trackme_metric_host_group_lookup]
definition = eval object_category="metric_host" | lookup trackme_logical_group object_group_members as metric_host OUTPUTNEW _key as object_group_key, object_group_name, object_group_min_green_percent\
| eventstats count as object_group_members_count, min(metric_last_lag_seen) as object_group_last_lag_seen, count(eval(metric_host_state="red")) as object_group_members_red by object_group_key, object_group_name\
| eval object_group_green_percent=100-(object_group_members_red/object_group_members_count*100)\
| eval metric_host_state=if(isnotnull(object_group_key) AND isnotnull(object_group_name) AND metric_host_state!="green" AND object_group_green_percent>=object_group_min_green_percent, "blue", metric_host_state)\
| eval object_group_state=if(isnotnull(object_group_key) AND isnotnull(object_group_name) AND object_group_green_percent>=object_group_min_green_percent, "green", "red")
iseval = 0

# Load audit flip collection for SLA compliance
[trackme_get_sla_root]
definition = inputlookup trackme_audit_flip | sort limit=0 - time | eval _time=time\
| addinfo | where _time>=info_min_time AND (_time<=info_max_time OR info_max_time="+Infinity")\
`comment("#### Once the collection is loaded and the time field defined, lookup main collection for enrichment purposes")`\
| lookup trackme_data_source_monitoring data_name as object OUTPUTNEW data_monitored_state as monitored_state, data_last_time_seen as last_time_seen, priority\
| lookup trackme_host_monitoring data_host as object OUTPUTNEW data_monitored_state as monitored_state, data_last_time_seen as last_time_seen, priority\
| lookup trackme_metric_host_monitoring metric_host as object OUTPUTNEW metric_monitored_state as monitored_state, metric_last_time_seen as last_time_seen, priority\
`comment("#### Retrieve data_source objects for which no flipping states where recorded ####")`\
| append [\
| inputlookup trackme_data_source_monitoring | where data_monitored_state="enabled" | addinfo\
| lookup trackme_audit_flip object as data_name OUTPUT object as FOUND | where isnull(FOUND) | fields - FOUND\
| eval object=data_name, time=if(info_min_time>data_first_time_seen, info_min_time, data_first_time_seen), object_state=data_source_state, last_time_seen=data_last_time_seen, object_category="data_source", monitored_state=data_monitored_state, object_previous_state="N/A", result="No flipping state records", _time=time\
| where isnum(_time)\
| fields _time, last_time_seen, monitored_state	object, object_category, object_previous_state, object_state, priority, result, time\
]\
`comment("#### Retrieve data_host objects for which no flipping states where recorded ####")`\
| append [\
| inputlookup trackme_host_monitoring | where data_monitored_state="enabled" | addinfo\
| lookup trackme_audit_flip object as data_host OUTPUT object as FOUND | where isnull(FOUND) | fields - FOUND\
| eval object=data_host, time=if(info_min_time>data_first_time_seen, info_min_time, data_first_time_seen), object_state=data_host_state, last_time_seen=data_last_time_seen, object_category="data_host", monitored_state=data_monitored_state, object_previous_state="N/A", result="No flipping state records", _time=time\
| where isnum(_time)\
| fields _time, last_time_seen, monitored_state	object, object_category, object_previous_state, object_state, priority, result, time\
]\
`comment("#### Retrieve data_host objects for which no flipping states where recorded ####")`\
| append [\
| inputlookup trackme_metric_host_monitoring | where metric_monitored_state="enabled" | addinfo\
| lookup trackme_audit_flip object as metric_host OUTPUT object as FOUND | where isnull(FOUND) | fields - FOUND\
| eval object=metric_host, time=if(info_min_time>metric_first_time_seen, info_min_time, metric_first_time_seen), object_state=metric_host_state, last_time_seen=metric_last_time_seen, object_category="metric_host", monitored_state=metric_monitored_state, object_previous_state="N/A", result="No flipping state records", _time=time\
| where isnum(_time)\
| fields _time, last_time_seen, monitored_state	object, object_category, object_previous_state, object_state, priority, result, time\
]
iseval = 0

# Get SLA compliance table
[trackme_get_sla(4)]
definition = `trackme_get_sla_root`\
`comment("#### Apply filters as soon as possible ####")`\
| search object_category=$object_category$ object=$object_filter1$ object=$object_filter2$\
`comment("#### To remove any pollution during the SLA compliance calculation, filter on active objects ####")`\
| where isnotnull(monitored_state) AND monitored_state="enabled" AND last_time_seen>=relative_time(now(), "-15d@d")\
`comment("#### Apply filters as soon as possible ####")`\
| search priority=$priority$\
`comment("#### sort by time ####")`\
| sort limit=0 _time\
`comment("#### use streamstats to get the previous time value to determine the time spent in each mode ####")`\
| streamstats last(_time) as previous_time current=f by object, object_category\
`comment("#### get entries numbers and total entries number for further processing ####")`\
| streamstats count as number_entry by object, object_category\
| eventstats count as number_total by object, object_category\
`comment("#### The following is used to get the next value of time for the very first entry from the collection on a per base statement ####")`\
| eval combo = number_entry . ":" . time\
| eventstats list(combo) as combo by object, object_category\
| rex max_match=1 field=combo "^2:(?<time_second_entry>\d*)$"\
| fields - combo\
`comment("#### Perform the duration calculation and results formatting, there are different steps, states and conditions to cover all cases, purpose is getting the time spent in seconds for each state ####")`\
| eval duration_green=case(\
(match(result, "has flipped from previous_state=(green|blue|discovered) to state=(red|orange)") AND (number_entry != number_total) AND isnum(previous_time) ), (time - previous_time)\
)\
| eval duration_not_green=case(\
(match(result, "has flipped from previous_state=(red|orange) to state=(green|blue|discovered)") AND (number_entry != number_total) AND isnum(previous_time) ), (time - previous_time)\
)\
| eval duration_green = if( number_entry = number_total AND match(result, "has flipped from previous_state=(red|orange) to state=(green|blue|discovered)"), now() - time, duration_green)\
| eval duration_not_green = if( number_entry = number_total AND match(result, "has flipped from previous_state=(green|blue|discovered) to state=(red|orange)"), now() - time, duration_not_green)\
| eval duration_green = if( number_entry = number_total AND match(result, "has flipped from previous_state=(green|blue|discovered) to state=(red|orange)"), time-previous_time, duration_green)\
| eval duration_not_green = if( number_entry = number_total AND match(result, "has flipped from previous_state=(red|orange) to state=(green|blue|discovered)"), time-previous_time, duration_not_green)\
| stats sum(duration_green) as total_duration_green, sum(duration_not_green) as duration_not_green, latest(object_state) as last_object_state, first(monitored_state) as monitored_state, first(priority) as priority by object, object_category\
| fillnull total_duration_green, duration_not_green\
| eval total_duration=(total_duration_green + duration_not_green)\
| eval percent_sla=round(total_duration_green/total_duration*100, 2)\
| eval percent_sla=if(isnull(percent_sla) AND last_object_state="green", "100.00", percent_sla)\
| eval percent_sla=if(isnull(percent_sla), "0.00", percent_sla)\
| fields object, object_category, priority, monitored_state, percent_sla
args = object_category, object_filter1, object_filter2, priority
iseval = 0

# Get SLA compliance results for a particular object
[trackme_get_sla(2)]
definition = `trackme_get_sla_root`\
`comment("#### Apply filters as soon as possible ####")`\
| search object=$object$ object_category=$object_category$\
`comment("#### sort by time ####")`\
| sort limit=0 _time\
`comment("#### use streamstats to get the previous time value to determine the time spent in each mode ####")`\
| streamstats last(_time) as previous_time current=f by object, object_category\
`comment("#### get entries numbers and total entries number for further processing ####")`\
| streamstats count as number_entry by object, object_category\
| eventstats count as number_total by object, object_category\
`comment("#### The following is used to get the next value of time for the very first entry from the collection on a per base statement ####")`\
| eval combo = number_entry . ":" . time\
| eventstats list(combo) as combo by object, object_category\
| rex max_match=1 field=combo "^2:(?<time_second_entry>\d*)$"\
| fields - combo\
`comment("#### Perform the duration calculation and results formatting, there are different steps, states and conditions to cover all cases, purpose is getting the time spent in seconds for each state ####")`\
| eval duration_green=case(\
(match(result, "has flipped from previous_state=(green|blue) to state=(red|orange)") AND (number_entry != number_total) AND isnum(previous_time) ), (time - previous_time)\
)\
| eval duration_not_green=case(\
(match(result, "has flipped from previous_state=(red|orange) to state=(green|blue)") AND (number_entry != number_total) AND isnum(previous_time) ), (time - previous_time)\
)\
| eval duration_green = if( number_entry = number_total AND match(result, "has flipped from previous_state=(red|orange) to state=(green|blue|discovered)"), now() - time, duration_green)\
| eval duration_not_green = if( number_entry = number_total AND match(result, "has flipped from previous_state=(green|blue|discovered) to state=(red|orange)"), now() - time, duration_not_green)\
| eval duration_green = if( number_entry = number_total AND match(result, "has flipped from previous_state=(green|blue|discovered) to state=(red|orange)"), time-previous_time, duration_green)\
| eval duration_not_green = if( number_entry = number_total AND match(result, "has flipped from previous_state=(red|orange) to state=(green|blue|discovered)"), time-previous_time, duration_not_green)\
`comment("#### Convert duration seconds to human readable format ####")`\
| eval duration_green=tostring(duration_green, "duration"), duration_not_green=tostring(duration_not_green, "duration")\
| fields - time_second_entry, previous_time, time\
| fields _time, object_category, object, object_state, object_previous_state, result, duration_green, duration_not_green, number_entry, number_total, *
args = object, object_category
iseval = 0

#
# Enrichment tags
#

[trackme_tags_default_message]
definition = eval tags =  "Tags enrichment is not configured yet, consult the configuration UI TrackMe manage and configure."
iseval = 0

# data_host_tags
[trackme_get_data_host_tags]
definition = `trackme_tags_default_message`
iseval = 0

# metric_host_tags
[trackme_get_metric_host_tags]
definition = `trackme_tags_default_message`
iseval = 0
