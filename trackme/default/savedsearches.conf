# savedsearches.conf

# Monitoring of data sources

[TrackMe - Data sources abstract root tracker]
request.ui_dispatch_app = trackme
request.ui_dispatch_view = trackme
is_visible = false
search = | `tstats` max(_indextime) as current_data_last_ingest, min(_time) as current_data_first_time_seen, max(_time) as current_data_last_time_seen, count as current_data_eventcount where index=* sourcetype=* `trackme_tstats_main_filter` `trackme_get_idx_whitelist(trackme_data_source_monitoring_whitelist_index, data_index)` `apply_data_source_blacklists_data_retrieve` by index, sourcetype, host\
| eval current_data_last_ingestion_lag_seen=current_data_last_ingest-current_data_last_time_seen\
| stats max(current_data_last_ingest) as current_data_last_ingest, min(current_data_first_time_seen) as current_data_first_time_seen, max(current_data_last_time_seen) as current_data_last_time_seen, avg(current_data_last_ingestion_lag_seen) as current_data_last_ingestion_lag_seen, sum(current_data_eventcount) as current_data_eventcount by index, sourcetype\
| eval current_data_last_lag_seen=now()-current_data_last_time_seen, data_source_is_online="true"\
| rename index as data_index, sourcetype as data_sourcetype\
| append [ | inputlookup trackme_data_source_monitoring | eval key=_key | search `trackme_get_idx_whitelist_searchtime(trackme_data_source_monitoring_whitelist_index, data_index)`]\
| stats first(key) as _key, first(*) as "*" by data_index, data_sourcetype\
| eval data_last_lag_seen=if(isnotnull(current_data_last_lag_seen), current_data_last_lag_seen, data_last_lag_seen)\
| eval data_last_ingestion_lag_seen=if(isnotnull(current_data_last_ingestion_lag_seen), round(current_data_last_ingestion_lag_seen, 0), round(data_last_ingestion_lag_seen, 0))\
| eval data_first_time_seen=if(isnotnull(current_data_first_time_seen), current_data_first_time_seen, data_first_time_seen)\
| eval data_last_time_seen=if(isnotnull(current_data_last_time_seen), current_data_last_time_seen, data_last_time_seen)\
| eval data_last_ingest=if(isnotnull(current_data_last_ingest), current_data_last_ingest, data_last_ingest)\
| eval data_eventcount=if(isnotnull(current_data_eventcount), current_data_eventcount, data_eventcount)\
| fields - current_*\
| `trackme_default_monitored_state`\
| `trackme_default_lag`\
| `trackme_default_monitored_wdays`\
| `trackme_default_priority`\
| eval data_override_lagging_class=if(isnull(data_override_lagging_class) OR data_override_lagging_class="null", "false", data_override_lagging_class)\
| lookup trackme_custom_lagging_definition name as data_index OUTPUTNEW value as data_custom_max_lag_allowed\
| lookup trackme_custom_lagging_definition name as data_sourcetype OUTPUTNEW value as data_custom_max_lag_allowed\
| eval data_max_lag_allowed	=if(isnum(data_custom_max_lag_allowed) AND data_override_lagging_class!="true", data_custom_max_lag_allowed, data_max_lag_allowed)\
| eval data_name=if(isnull(data_name), data_index . ":" . data_sourcetype, data_name)\
| search NOT [ | inputlookup trackme_audit_changes | where action="success" AND change_type="delete permanent" | eval _time=time/1000 | where _time>relative_time(now(), "-7d") | table object | dedup object | sort limit=0 object | rename object as data_name ]\
| eval data_monitoring_level=if(isnull(data_monitoring_level), "sourcetype", data_monitoring_level)\
| eventstats max(data_last_time_seen) as data_last_time_seen_idx, min(data_last_lag_seen) as data_last_lag_seen_idx by data_index\
| `trackme_data_sources_filtering`\
| `trackme_eval_data_source_state` | eval data_tracker_runtime=now()\
| lookup local=t trackme_data_source_monitoring data_name OUTPUT data_source_state as data_previous_source_state, data_tracker_runtime as data_previous_tracker_runtime\
| append [ | inputlookup trackme_audit_flip | where object_category="data_source" | eval _time=time | stats max(_time) as current_latest_flip_time, latest(object_state) as current_latest_flip_state by object | rename object as data_name ]\
| stats first(_key) as _key, first(*) as "*" by data_name\
| eval latest_flip_time=if(isnotnull(current_latest_flip_time), current_latest_flip_time, latest_flip_time)\
| eval latest_flip_state=if(isnotnull(current_latest_flip_state), current_latest_flip_state, latest_flip_state)\
| fields - current_latest_flip_time, current_latest_flip_state\
| where isnotnull(data_last_time_seen)\
| eval data_last_lag_seen=if(data_source_is_online="true", data_last_lag_seen, now()-data_last_time_seen)\
| outputlookup trackme_data_source_monitoring append=t key_field=_key\
| lookup local=t trackme_data_source_monitoring data_name OUTPUT data_name as FOUND | where isnull(FOUND) | fields - FOUND\
| outputlookup trackme_data_source_monitoring append=t\
| stats count

[TrackMe - Data sources availability short term tracker]
cron_schedule = */5 * * * *
description = This scheduled report tracks and updates the data source availability KVstore based lookup
dispatch.earliest_time = -4h
dispatch.latest_time = +4h
enableSched = 1
request.ui_dispatch_app = trackme
request.ui_dispatch_view = trackme
search  = | savedsearch "TrackMe - Data sources abstract root tracker"

[TrackMe - Data sources availability long term tracker]
cron_schedule = 1 * * * *
description = This scheduled report tracks and updates the data source availability KVstore based lookup
dispatch.earliest_time = -7d
dispatch.latest_time = +4h
enableSched = 1
request.ui_dispatch_app = trackme
request.ui_dispatch_view = trackme
search  = | savedsearch "TrackMe - Data sources abstract root tracker"

[TrackMe - Data sources auto mode tracker update (updates value for data_wday_monitoring)]
cron_schedule = 0 2 * * *
description = This scheduled report tracks and updates the value for auto defined data_wday_monitoring
dispatch.earliest_time = -30d@d
dispatch.latest_time = now
enableSched = 1
request.ui_dispatch_app = trackme
request.ui_dispatch_view = trackme
search  = | `tstats` max(_time) as current_data_last_time_seen where index=* `trackme_tstats_main_filter` `trackme_get_idx_whitelist(trackme_data_source_monitoring_whitelist_index, data_index)` `apply_data_source_blacklists_data_retrieve` by _time index, sourcetype span=1d\
| eval wday=strftime(_time, "%a")\
| streamstats count(eval(wday="Sat")) as saturday_seen, count(eval(wday="Sun")) as sunday_seen by index, sourcetype\
| stats max(saturday_seen) as saturday_seen, max(sunday_seen) as sunday_seen by index, sourcetype\
| eval auto_data_monitoring_wdays=case(saturday_seen>1 AND sunday_seen>1, "auto:all_days", saturday>1 AND sunday_seen<1, "auto:monday-to-saturday", saturday_seen<=1 AND sunday_seen<=1, "auto:monday-to-friday")\
| rename index as data_index, sourcetype as data_sourcetype | eval data_name = data_index . ":" . data_sourcetype\
| fields data_name, data_index, data_sourcetype, auto_data_monitoring_wdays\
| join data_name [ |inputlookup trackme_data_source_monitoring | eval key=_key]\
| eval data_monitoring_days=if(match(data_monitoring_days, "^manual:"), data_monitoring_days, auto_data_monitoring_wdays) | fields - auto_*\
| rename key as _key\
| outputlookup trackme_data_source_monitoring append=t key_field=_key\
| stats count

[TrackMe - Alert on data source availability]
alert.digest_mode = 0
alert.severity = 4
alert.suppress = 1
alert.suppress.fields = data_name, data_index, data_sourcetype
alert.suppress.period = 24h
alert.track = 1
counttype = number of events
cron_schedule = */5 * * * *
description = This alert will trigger if one or more of the data hosts are detected as unavailable or not honouring SLA policies.
dispatch.earliest_time = -5m
dispatch.latest_time = now
display.general.type = statistics
display.page.search.tab = statistics
display.visualizations.charting.chart = line
disabled = true
enableSched = 1
quantity = 0
relation = greater than
request.ui_dispatch_app = trackme
request.ui_dispatch_view = trackme
search = | inputlookup trackme_data_source_monitoring\
| where data_monitored_state="enabled" AND `trackme_alerts_priority`\
| `trackme_eval_data_source_state`\
| `apply_data_source_blacklists`\
| where data_source_state="red"\
| `trackme_date_format(data_last_ingest)`\
| `trackme_date_format(data_last_time_seen)`\
| `trackme_date_format(data_tracker_runtime)`\
| `trackme_date_format(data_previous_tracker_runtime)`\
| rename "* (translated)" as "*"\
| `trackme_get_identity_card(data_name)`\
| `trackme_ack_lookup(data_name, data_source)`

# Monitoring of hosts

#
# Host monitoring
#

[TrackMe - Data hosts abstract root tracker]
request.ui_dispatch_app = trackme
request.ui_dispatch_view = trackme
is_visible = false
search = | `tstats` max(_indextime) as current_data_last_ingest, min(_time) as current_data_first_time_seen, max(_time) as current_data_last_time_seen, count as current_data_eventcount where index=* sourcetype=* host=* host!="" `trackme_tstats_main_filter` `trackme_get_idx_whitelist(trackme_data_host_monitoring_whitelist_index, data_index)` `apply_data_host_blacklists_data_retrieve` by index, sourcetype, host\
| eval current_data_last_ingestion_lag_seen=current_data_last_ingest-current_data_last_time_seen\
| lookup trackme_custom_lagging_definition name as index OUTPUTNEW value as data_custom_max_lag_allowed\
| lookup trackme_custom_lagging_definition name as sourcetype OUTPUTNEW value as data_custom_max_lag_allowed\
| stats max(current_data_last_ingest) as current_data_last_ingest, min(current_data_first_time_seen) as current_data_first_time_seen, max(current_data_last_time_seen) as current_data_last_time_seen, avg(current_data_last_ingestion_lag_seen) as current_data_last_ingestion_lag_seen, sum(current_data_eventcount) as current_data_eventcount, values(index) as index, values(sourcetype) as sourcetype, max(data_custom_max_lag_allowed) as data_custom_max_lag_allowed by host\
| eval current_data_last_lag_seen=now()-current_data_last_time_seen, data_host_is_online="true"\
| rename host as data_host, index as data_index, sourcetype as data_sourcetype\
| eval data_host=upper(data_host)\
| search NOT [ | inputlookup trackme_audit_changes | where action="success" AND change_type="delete permanent" | eval _time=time/1000 | where _time>relative_time(now(), "-7d") | table object | dedup object | sort limit=0 object | rename object as data_host ]\
| stats max(current_data_last_ingest) as current_data_last_ingest, min(current_data_first_time_seen) as current_data_first_time_seen, max(current_data_last_time_seen) as current_data_last_time_seen, min(current_data_last_lag_seen) as current_data_last_lag_seen, values(data_index) as data_index, values(data_sourcetype) as data_sourcetype, max(data_custom_max_lag_allowed) as data_custom_max_lag_allowed, max(current_data_last_ingestion_lag_seen) as current_data_last_ingestion_lag_seen, sum(current_data_eventcount) as current_data_eventcount by data_host\
| append [ | inputlookup trackme_host_monitoring | eval key=_key | eval data_host=upper(data_host) | makemv delim="," data_index | makemv delim="," data_sourcetype ]\
| stats first(key) as key, values(data_index) as data_index, values(data_sourcetype) as data_sourcetype, first(*) as "*" by data_host\
| eval data_last_ingest=if(isnotnull(current_data_last_ingest), current_data_last_ingest, data_last_ingest)\
| eval data_last_lag_seen=if(isnotnull(current_data_last_lag_seen), current_data_last_lag_seen, data_last_lag_seen)\
| eval data_last_ingestion_lag_seen=if(isnotnull(current_data_last_ingestion_lag_seen), round(current_data_last_ingestion_lag_seen, 0), round(data_last_ingestion_lag_seen, 0))\
| eval data_first_time_seen=if(isnotnull(current_data_first_time_seen), current_data_first_time_seen, data_first_time_seen)\
| eval data_last_time_seen=if(isnotnull(current_data_last_time_seen), current_data_last_time_seen, data_last_time_seen)\
| eval data_eventcount=if(isnotnull(current_data_eventcount), current_data_eventcount, data_eventcount)\
| `trackme_default_host_monitored_state`\
| `trackme_default_host_lag`\
| `trackme_default_host_monitored_wdays`\
| `trackme_default_priority`\
| eval data_override_lagging_class=if(isnull(data_override_lagging_class) OR data_override_lagging_class="null", "false", data_override_lagging_class)\
| eval data_max_lag_allowed	=if(isnum(data_custom_max_lag_allowed) AND data_override_lagging_class!="true", data_custom_max_lag_allowed, data_max_lag_allowed)\
| rename key as _key\
| eval data_index=mvdedup(data_index), data_sourcetype=mvdedup(data_sourcetype)\
| eval data_index=mvjoin(data_index, ","), data_sourcetype=mvjoin(data_sourcetype, ",")\
| `trackme_eval_data_host_state`\
| `trackme_data_host_group_lookup`\
| eval data_tracker_runtime=now()\
| lookup local=t trackme_host_monitoring data_host OUTPUT data_host_state as data_previous_host_state, data_tracker_runtime as data_previous_tracker_runtime\
| append [ | inputlookup trackme_audit_flip | where object_category="data_host" | eval _time=time | stats max(_time) as current_latest_flip_time, latest(object_state) as current_latest_flip_state by object | rename object as data_host ]\
| stats first(_key) as _key, first(*) as "*" by data_host\
| eval latest_flip_time=if(isnotnull(current_latest_flip_time), current_latest_flip_time, latest_flip_time)\
| eval latest_flip_state=if(isnotnull(current_latest_flip_state), current_latest_flip_state, latest_flip_state)\
| fields - current_latest_flip_time, current_latest_flip_state\
| where isnotnull(data_last_time_seen)\
| eval data_last_lag_seen=if(data_host_is_online="true", data_last_lag_seen, now()-data_last_time_seen)\
| `trackme_data_host_rule_filter(data_host)`\
| outputlookup trackme_host_monitoring append=t key_field=_key\
| lookup local=t trackme_host_monitoring data_host OUTPUT data_host as FOUND | where isnull(FOUND) | fields - FOUND\
| outputlookup trackme_host_monitoring append=t\
| stats count

[TrackMe - hosts availability short term tracker]
cron_schedule = */5 * * * *
description = This scheduled report tracks and updates the data source availability KVstore based lookup
dispatch.earliest_time = -4h
dispatch.latest_time = +4h
enableSched = 1
request.ui_dispatch_app = trackme
request.ui_dispatch_view = trackme
search  = | savedsearch "TrackMe - Data hosts abstract root tracker"

[TrackMe - hosts availability long term tracker]
cron_schedule = 1 * * * *
description = This scheduled report tracks and updates the data source availability KVstore based lookup
dispatch.earliest_time = -7d
dispatch.latest_time = +4h
enableSched = 1
request.ui_dispatch_app = trackme
request.ui_dispatch_view = trackme
search  = | savedsearch "TrackMe - Data hosts abstract root tracker"

[TrackMe - Data hosts auto mode tracker update (updates value for data_wday_monitoring)]
cron_schedule = 0 3 * * *
description = This scheduled report tracks and updates the value for auto defined data_wday_monitoring
dispatch.earliest_time = -30d@d
dispatch.latest_time = now
enableSched = 1
request.ui_dispatch_app = trackme
request.ui_dispatch_view = trackme
search  = | `tstats` max(_time) as current_data_last_time_seen where index=* `trackme_tstats_main_filter` `trackme_get_idx_whitelist(trackme_data_host_monitoring_whitelist_index, data_index)` `apply_data_host_blacklists_data_retrieve` by _time host span=1d\
| eval wday=strftime(_time, "%a")\
| streamstats count(eval(wday="Sat")) as saturday_seen, count(eval(wday="Sun")) as sunday_seen by host\
| stats max(saturday_seen) as saturday_seen, max(sunday_seen) as sunday_seen by host\
| eval auto_data_monitoring_wdays=case(saturday_seen>1 AND sunday_seen>1, "auto:all_days", saturday>1 AND sunday_seen<1, "auto:monday-to-saturday", saturday_seen<=1 AND sunday_seen<=1, "auto:monday-to-friday")\
| rename host as data_host\
| eval data_host=upper(data_host)\
| fields data_host, auto_data_monitoring_wdays\
| join data_host [ |inputlookup trackme_host_monitoring | eval key=_key | eval data_host=upper(data_host) ]\
| eval data_monitoring_days=if(match(data_monitoring_days, "^manual:"), data_monitoring_days, auto_data_monitoring_wdays) | fields - auto_*\
| rename key as _key\
| outputlookup trackme_host_monitoring append=t key_field=_key\
| stats count

[TrackMe - Alert on data host availability]
alert.digest_mode = 0
alert.severity = 4
alert.suppress = 1
alert.suppress.fields = data_host
alert.suppress.period = 24h
alert.track = 1
counttype = number of events
cron_schedule = */5 * * * *
description = This alert will trigger if one or more of the data hosts are detected as unavailable or not honouring SLA policies.
dispatch.earliest_time = -5m
dispatch.latest_time = now
display.general.type = statistics
display.page.search.tab = statistics
display.visualizations.charting.chart = line
disabled = true
enableSched = 1
quantity = 0
relation = greater than
request.ui_dispatch_app = trackme
request.ui_dispatch_view = trackme
search = | inputlookup trackme_host_monitoring\
| where data_monitored_state="enabled" AND `trackme_alerts_priority`\
| `trackme_eval_data_host_state`\
| `apply_data_host_blacklists`\
| `trackme_data_host_group_lookup`\
| where data_host_state="red"\
| `trackme_date_format(data_last_ingest)`\
| `trackme_date_format(data_last_time_seen)`\
| `trackme_date_format(data_tracker_runtime)`\
| `trackme_date_format(data_previous_tracker_runtime)`\
| rename "* (translated)" as "*"\
| `trackme_ack_lookup(data_host, data_host)`

#
# Metric hosts monitoring
#

[TrackMe - metric hosts abstract root tracker]
request.ui_dispatch_app = trackme
request.ui_dispatch_view = trackme
is_visible = false
search = | mstats latest(_value) as value where index=* `trackme_mstats_main_filter` `trackme_get_idx_whitelist(trackme_metric_host_monitoring_whitelist_index, metric_index)` host="$host$" by metric_name, index, host span=1s\
| stats max(_time) as _time by metric_name, index, host\
| rex field=metric_name "(?<metric_category>[^\.]*)\.{0,1}"\
| `apply_metric_host_blacklists_metric_category`\
| stats max(_time) as _time by metric_category, index, host\
| eval metric_current_lag_sec=(now() - _time)\
| lookup trackme_metric_lagging_definition metric_category OUTPUT metric_max_lag_allowed\
| `trackme_default_metric_host_lag`\
| `trackme_eval_metric_host_state`\
| eval metric_details = "metric_category=" . metric_category . "|" . "metric_last_time=" . _time . "|" . "metric_max_lag_allowed=" . metric_max_lag_allowed . "|" . "metric_current_lag_sec=" . metric_current_lag_sec . "|" . "metric_host_state=" . metric_host_state . "|" . "metric_online=true"\
| stats max(_time) as _time, values(index) as index, values(metric_category) as metric_category, values(metric_details) as metric_details by host\
| rename _time as metric_last_time_seen\
| eval metric_last_lag_seen=(now() - metric_last_time_seen)\
| eval metric_tracker_runtime=now()\
| rename host as metric_host, index as metric_index\
| append [ | inputlookup trackme_metric_host_monitoring | eval key=_key | makemv metric_category delim="," | makemv metric_index delim="," | makemv metric_details delim="," | search metric_host="$host$" ]\
| mvexpand metric_details\
| rex field=metric_details "metric_category=(?<detail_metric_category>[^\|]*)\|metric_last_time=(?<detail_metric_last_time>[^\|]*)\|metric_max_lag_allowed=(?<detail_metric_max_lag_allowed>[^\|]*)\|metric_current_lag_sec=(?<detail_metric_current_lag_sec>[^\|]*)\|metric_host_state=(?<detail_metric_host_state>[^\|]*)\|metric_online=(?<detail_metric_online>[^\|]*)"\
| rex field=metric_details "metric_category=(?<detail_metric_category>[^\|]*)\|metric_last_time=(?<detail_metric_last_time>[^\|]*)\|metric_max_lag_allowed=(?<detail_metric_max_lag_allowed>[^\|]*)\|metric_current_lag_sec=(?<detail_metric_current_lag_sec>[^\|]*)\|metric_host_state=(?<detail_metric_host_state>[^\|]*)"\
| lookup trackme_metric_lagging_definition metric_category as detail_metric_category OUTPUT metric_max_lag_allowed as sla_policy_detail_metric_max_lag_allowed\
| eval detail_metric_max_lag_allowed=if(isnum(sla_policy_detail_metric_max_lag_allowed), sla_policy_detail_metric_max_lag_allowed, detail_metric_max_lag_allowed)\
| `trackme_eval_metric_category_state`\
| fields - sla_policy_detail_metric_max_lag_allowed\
| eval _time=metric_tracker_runtime\
| eventstats latest(detail_metric_last_time) as detail_metric_last_time,  latest(detail_metric_current_lag_sec) as detail_metric_current_lag_sec, latest(detail_metric_max_lag_allowed) as detail_metric_max_lag_allowed, latest(detail_metric_host_state) as detail_metric_host_state, first(detail_metric_online) as detail_metric_online by metric_host, detail_metric_category\
| eval detail_metric_current_lag_sec=if(detail_metric_online="true", detail_metric_current_lag_sec, now()-detail_metric_last_time)\
| `trackme_eval_metric_category_state`\
| `trackme_date_format(detail_metric_last_time)`\
| eval metric_details = "metric_category=" . detail_metric_category . "|" . "metric_last_time=" . detail_metric_last_time . "|" . "metric_max_lag_allowed=" . detail_metric_max_lag_allowed . "|" . "metric_current_lag_sec=" . detail_metric_current_lag_sec . "|" . "metric_host_state=" . detail_metric_host_state\
| eval metric_details_human  = "metric_category=" . detail_metric_category . "|" . "metric_last_time=" . 'detail_metric_last_time (translated)' . "|" . "metric_current_lag_sec=" . detail_metric_current_lag_sec . "|" . "metric_host_state=" . detail_metric_host_state\
| `apply_metric_host_blacklists_detail_metric_category`\
| stats first(key) as key, max(metric_last_time_seen) as metric_last_time_seen, values(metric_index) as metric_index, values(metric_category) as metric_category, values(metric_details) as metric_details, values(metric_details_human) as metric_details_human, latest(metric_last_lag_seen) as metric_last_lag_seen, max(metric_tracker_runtime) as metric_tracker_runtime, first(metric_monitoring_wdays) as metric_monitoring_wdays, first(metric_monitored_state) as metric_monitored_state, first(priority) as priority by metric_host\
| lookup trackme_metric_host_monitoring metric_host OUTPUTNEW _key as key\
| rename key as _key\
| `trackme_eval_metric_host_state`\
| `trackme_default_priority`\
| search `trackme_get_idx_whitelist_searchtime(trackme_metric_host_monitoring_whitelist_index, metric_index)`\
| lookup local=t trackme_metric_host_monitoring metric_host OUTPUT metric_host_state as metric_previous_host_state, metric_tracker_runtime as metric_previous_tracker_runtime\
| append [ | inputlookup trackme_audit_flip | where object_category="metric_host" | eval _time=time | stats max(_time) as current_latest_flip_time, latest(object_state) as current_latest_flip_state by object | rename object as metric_host ]\
| stats first(_key) as keyid, first(latest_flip_time) as latest_flip_time, first(latest_flip_state) as latest_flip_state, first(current_latest_flip_time) as current_latest_flip_time, first(current_latest_flip_state) as current_latest_flip_state, values(*) as "*" by metric_host\
| eval latest_flip_time=if(isnotnull(current_latest_flip_time), current_latest_flip_time, latest_flip_time)\
| eval latest_flip_state=if(isnotnull(current_latest_flip_state), current_latest_flip_state, latest_flip_state)\
| fields - current_latest_flip_time, current_latest_flip_state\
| where isnotnull(metric_category)\
| `trackme_default_metric_host_monitored_state`

[TrackMe - metric hosts collection based table report]
request.ui_dispatch_app = trackme
request.ui_dispatch_view = trackme
is_visible = false
search = | inputlookup trackme_metric_host_monitoring\
| eval keyid=_key\
| eval metric_index_raw=metric_index, metric_category_raw=metric_category, metric_details_raw=metric_details\
| makemv delim="," metric_index\
| makemv delim="," metric_category\
| makemv delim="," metric_details\
| mvexpand metric_details\
| rex field=metric_details "metric_category=(?<detail_metric_category>[^\|]*)\|metric_last_time=(?<detail_metric_last_time>[^\|]*)\|metric_max_lag_allowed=(?<detail_metric_max_lag_allowed>[^\|]*)\|metric_current_lag_sec=(?<detail_metric_current_lag_sec>[^\|]*)\|metric_host_state=(?<detail_metric_host_state>[^\|]*)"\
| `trackme_date_format(detail_metric_last_time)`\
| eval metric_details_human  = "metric_category=" . detail_metric_category . "|" . "metric_last_time=" . 'detail_metric_last_time (translated)' . "|" . "metric_current_lag_sec=" . detail_metric_current_lag_sec . "|" . "metric_host_state=" . detail_metric_host_state\
| fields - detail_*\
| stats values(*) as "*" by keyid

[TrackMe - metric hosts availability tracker]
cron_schedule = */5 * * * *
description = This scheduled report tracks and updates the metric hosts availability KVstore based lookup
dispatch.earliest_time = -5m
dispatch.latest_time = now
enableSched = 1
request.ui_dispatch_app = trackme
request.ui_dispatch_view = trackme
search = | savedsearch "TrackMe - metric hosts abstract root tracker" host=*\
| rename keyid as _key\
| eval metric_category=mvjoin(metric_category, ","), metric_index=mvjoin(metric_index, ","), metric_details=mvjoin(metric_details, ",")\
| search NOT [ | inputlookup trackme_audit_changes | where action="success" AND change_type="delete permanent" AND object_category="metric_host" | eval _time=time/1000 | where _time>relative_time(now(), "-7d") | table object | dedup object | sort limit=0 object | rename object as metric_host ]\
| `trackme_metric_host_group_lookup`\
| outputlookup trackme_metric_host_monitoring append=t key_field=_key\
| lookup local=t trackme_metric_host_monitoring metric_host OUTPUT metric_host as FOUND | where isnull(FOUND) | fields - FOUND\
| outputlookup trackme_metric_host_monitoring append=t\
| stats count

[trackMe - metric host table report]
dispatch.earliest_time = -5m
dispatch.latest_time = now
is_visible = false
search = | savedsearch "TrackMe - metric hosts abstract root tracker" host=*\
| eval metric_host_state=if(match(metric_details, "metric_host_state=red"), "red", "green")\
| `trackme_metric_host_group_lookup`\
| `trackme_date_format(metric_last_time_seen)` | rename "metric_last_time_seen (translated)" as "last time"

[trackMe - metric host live report]
dispatch.earliest_time = -5m
dispatch.latest_time = now
is_visible = false
search = | mstats latest(_value) as value where index=* metric_name="*" host="$host$" by metric_name, index, host span=1s\
| stats max(_time) as _time by metric_name, index, host\
| rex field=metric_name "(?<metric_category>[^\.]*)\.{0,1}"\
| stats values(metric_name) as metric_name, max(_time) as _time by metric_category, index, host\
| eval metric_current_lag_sec=(now() - _time)\
| lookup trackme_metric_lagging_definition metric_category OUTPUT metric_max_lag_allowed\
| eval metric_max_lag_allowed=if(isnull(metric_max_lag_allowed), "300", metric_max_lag_allowed)\
| eval metric_host_state=if(match(metric_details, "metric_host_state=red"), "red", "green")\
| stats max(_time) as "metric_last_time_seen", first(metric_max_lag_allowed) as metric_max_lag_allowed, values(index) as index, values(metric_name) as metric_name, first(metric_host_state) as metric_host_state by metric_category\
| `trackme_date_format(metric_last_time_seen)` | fields - metric_last_time_seen | rename "metric_last_time_seen (translated)" as metric_last_time_seen\
| fields index, metric_category, metric_name, metric_last_time_seen, metric_host_state

[trackMe - metric per host table report]
dispatch.earliest_time = -5m
dispatch.latest_time = now
is_visible = false
search = | savedsearch "TrackMe - metric hosts abstract root tracker" host="$host$"\
| fields metric_details_human\
| mvexpand metric_details_human\
| rex field=metric_details_human "metric_category=(?<metric_category>[^\|]*)\|metric_last_time=(?<metric_last_time>[^\|]*)\|metric_current_lag_sec=(?<metric_current_lag_sec>[^\|]*)\|metric_host_state=(?<metric_host_state>\w*)"\
| lookup trackme_metric_lagging_definition metric_category OUTPUT metric_max_lag_allowed\
| `trackme_default_metric_host_lag`\
| `trackme_eval_icons_metric_host_state_only`\
| fields metric_category metric_last_time metric_max_lag_allowed metric_current_lag_sec state metric_host_state

[TrackMe - Alert on metric host availability]
alert.digest_mode = 0
alert.severity = 4
alert.suppress = 1
alert.suppress.fields = metric_host
alert.suppress.period = 24h
alert.track = 1
counttype = number of events
cron_schedule = */5 * * * *
description = This alert will trigger if one or more of the metric hosts are detected in red mode, which one or more monitored metric unavailable of not honouring SLA policies.
dispatch.earliest_time = -5m
dispatch.latest_time = now
display.general.type = statistics
display.page.search.tab = statistics
display.visualizations.charting.chart = line
disabled = true
enableSched = 1
quantity = 0
relation = greater than
request.ui_dispatch_app = trackme
request.ui_dispatch_view = trackme
search = | inputlookup trackme_metric_host_monitoring\
| where metric_monitored_state="enabled" AND `trackme_alerts_priority`\
| where metric_host_state="red"\
| `trackme_date_format(metric_last_time_seen)`\
| `trackme_date_format(metric_tracker_runtime)`\
| `trackme_date_format(metric_previous_tracker_runtime)`\
| rename "* (translated)" as "*"\
| makemv metric_category delim=","\
| makemv metric_details delim=","\
| `trackme_ack_lookup(metric_host, metric_host)`

# Various

[TrackMe - Audit changes night purge]
cron_schedule = 30 3 * * *
description = This scheduled report purges old entries from the audit changes collection
dispatch.earliest_time = -5m
dispatch.latest_time = now
enableSched = 1
request.ui_dispatch_app = trackme
request.ui_dispatch_view = trackme
search  = | inputlookup trackme_audit_changes | sort limit=0 - time | eval _time=time/1000\
| `trackme_audit_changes_retention`\
| outputlookup trackme_audit_changes\
| stats count

[TrackMe - Flip state night purge]
cron_schedule = 0 4 * * *
description = This scheduled report purges old entries from the flip state collection
dispatch.earliest_time = -5m
dispatch.latest_time = now
enableSched = 1
request.ui_dispatch_app = trackme
request.ui_dispatch_view = trackme
search  = | inputlookup trackme_audit_flip | sort limit=0 - time | eval _time=time\
| `trackme_flip_state_retention`\
| outputlookup trackme_audit_flip\
| stats count

# Track flip state

[TrackMe - Flip state change tracker]
cron_schedule = 1-56/5 * * * *
description = This scheduled report tracks and updates the flip state KVstore based lookup
dispatch.earliest_time = -5m
dispatch.latest_time = now
enableSched = 1
request.ui_dispatch_app = trackme
request.ui_dispatch_view = trackme
search  = | inputlookup trackme_data_source_monitoring\
| inputlookup append=t trackme_host_monitoring\
| inputlookup append=t trackme_metric_host_monitoring\
| where (data_monitored_state="enabled" OR metric_monitored_state="enabled")\
| where (data_source_state!=data_previous_source_state) OR (data_host_state!=data_previous_host_state) OR (metric_host_state!=metric_previous_host_state)\
| eval time=case(isnotnull(data_tracker_runtime), data_tracker_runtime, isnotnull(metric_tracker_runtime), metric_tracker_runtime)\
| eval tracker_runtime=case(isnotnull(data_tracker_runtime), strftime(data_tracker_runtime, "%d/%m/%Y %H:%M:%S"), isnotnull(metric_tracker_runtime), strftime(metric_tracker_runtime, "%d/%m/%Y %H:%M:%S"))\
| eval object=case(isnotnull(data_name), data_name, isnotnull(data_host), data_host, isnotnull(metric_host), metric_host)\
| eval object_category=case(isnotnull(data_name), "data_source", isnotnull(data_host), "data_host", isnotnull(metric_host), "metric_host")\
| eval object_previous_state=case(isnotnull(data_previous_source_state), data_previous_source_state, isnotnull(data_previous_host_state), data_previous_host_state, isnotnull(metric_previous_host_state), metric_previous_host_state)\
| eval object_state=case(isnotnull(data_source_state), data_source_state, isnotnull(data_host_state), data_host_state, isnotnull(metric_host_state), metric_host_state)\
| eval result = tracker_runtime . ", object=" . object . " has flipped from previous_state=" . object_previous_state . " to state=" . object_state\
| table time, object, object_category, result, object_previous_state, object_state\
| lookup trackme_audit_flip time, object, object_category OUTPUT result as FOUND | where isnull(FOUND) | fields - FOUND\
| outputlookup trackme_audit_flip append=t\
| stats count

# Ack trackers

[TrackMe - Ack tracker]
cron_schedule = 1-56/5 * * * *
description = This scheduled report tracks and updates the Ack KVstore based lookup
dispatch.earliest_time = -5m
dispatch.latest_time = now
enableSched = 1
request.ui_dispatch_app = trackme
request.ui_dispatch_view = trackme
search = | inputlookup trackme_alerts_ack | eval keyid=_key\
| eval time_before_expiration=ack_expiration-now()\
| eval ack_state=if(time_before_expiration<="300", "inactive", ack_state)\
| lookup trackme_data_source_monitoring data_name as object OUTPUTNEW data_source_state as object_current_state\
| lookup trackme_host_monitoring data_host as object OUTPUTNEW data_host_state as object_current_state\
| lookup trackme_metric_host_monitoring metric_host as object OUTPUTNEW metric_host_state as object_current_state\
| eval ack_state=if(object_current_state="green", "inactive", ack_state)\
| eval ack_expiration=if(ack_state="inactive", "N/A", ack_expiration), ack_mtime=if(ack_state="inactive", "N/A", ack_mtime) | fields keyid, *\
| outputlookup append=t trackme_alerts_ack key_field=keyid
